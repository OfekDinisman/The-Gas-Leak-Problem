/** HOUSETON  downtown **/

double latitude = 29.737882871554312;
double longitude = -95.46285831417906;
double radius = 1.2;

DateTime StartDate = DateTime.newInstance(2022, 1, 4, 7, 00, 00);
DateTime EndDate = DateTime.newInstance(2022, 1, 4, 20, 00, 00);
String Simulation_Dataset = '2';

// LU 29.820414777342126, -95.9933880169435
// RD 29.56388233493162, -95.0920235039353

double MinLat  = 29.56388233493162;
double MaxLat  = 29.820414777342126;
double MinLong = -95.0920235039353;
double MaxLong = -95.9933880169435;

Integer numOfServices=60;

Id territoryGasLeak1 = [SELECT id FROM ServiceTerritory where Name='GasLeak1'].Id;
Id workTypeNormal = [Select Id from WorkType where Name='Standard'].Id;
Id workTypeEmergency = [Select Id from WorkType where Name='Emergency'].Id;

List<WorkOrder> workOrders = new List<WorkOrder>();
System.debug('LatScale: ' + (MaxLat - MinLat));
System.debug('LongScale: ' + (MinLong + (-1*MaxLong)));

for (Integer i=0; i<numOfServices; i++){
    WorkOrder wo = new WorkOrder();
    wo.ServiceTerritoryId = territoryGasLeak1;
    wo.WorkTypeId = workTypeNormal;
    // Radii
    // wo.Latitude = latitude + (Math.random() -0.5) * radius;
    // wo.Longitude = longitude + (Math.random() -0.5) * radius;
	// Rectangle
    wo.Latitude = MinLat + (Math.random() * (MaxLat - MinLat));
    wo.Longitude = MaxLong + (Math.random() * (MinLong + (-1*MaxLong)));
    wo.StartDate = StartDate;
    wo.EndDate = EndDate;
    wo.Simulation_Dataset__c = Simulation_Dataset;
    workOrders.add(wo);
}

for(Integer i=0; i< (numOfServices * 0.1); i++){
    WorkOrder wo = new WorkOrder();
    wo.ServiceTerritoryId = territoryGasLeak1;
    wo.WorkTypeId = workTypeEmergency;
    //Radii
    wo.Latitude = latitude + (Math.random() -0.5) * radius;
    wo.Longitude = longitude + (Math.random() -0.5) * radius;
    // Rectangle
    // wo.Latitude = MinLat + (Math.random() * (MaxLat - MinLat));
    // wo.Longitude = MaxLong + (Math.random() * (MinLong + (-1*MaxLong)));
    // Emergency Time
    wo.StartDate = StartDate +  (Math.random() * (8.0/24)); // + ~8h 
    wo.EndDate = wo.StartDate + (1.0/24) ; // 1h;
    System.debug('StartDate: ' + wo.StartDate);
    System.debug('EndDate: ' + wo.EndDate);
    wo.Simulation_Dataset__c = Simulation_Dataset;
    workOrders.add(wo);
}

insert workOrders;


/*
List<ServiceAppointment> saList = new List<ServiceAppointment>();
saList = [Select Id,EarliestStartTime,DueDate,Status,Simulation_Dataset__c from ServiceAppointment];
for (ServiceAppointment sa : saList)
 {
     sa.EarliestStartTime = DateTime.newInstance(2022, 1, 3, 6, 30, 00);
     sa.DueDate = DateTime.newInstance(2022, 1, 3, 20, 00, 00);
     sa.Simulation_Dataset__c = '1';
 }
update saList;
*/

/*
List<ServiceAppointment> saList = new List<ServiceAppointment>();
saList = [Select Id,EarliestStartTime,DueDate,Status,Simulation_Dataset__c from ServiceAppointment];
DELETE saList;

List<WorkOrder> woList = new List<WorkOrder>();
woList = [Select Id from WorkOrder];
DELETE woList;
*/
